import { FixedSizeList, VariableSizeList } from 'react-window';
import { PureComponent, createRef } from 'react';
import { jsx } from 'react/jsx-runtime';

var x=()=>{};var h=(r,e=null)=>({child:null,isShown:e?e.public.isOpen&&e.isShown:!0,parent:e,public:r,sibling:null,visited:!1}),R=(r,{getRecordData:e})=>{let{data:{id:t}}=e(r);return t},L=r=>e=>{r.forEach(t=>{typeof t=="function"?t(e):t!=null&&(t.current=e);});};var k=({index:r,data:{component:e,getRecordData:t,treeData:a},style:n,isScrolling:o})=>{let l=t(r);return jsx(e,{isScrolling:o,style:n,treeData:a,...l})},A=({createRecord:r},{buildingTaskTimeout:e,placeholder:t,async:a=!1,treeWalker:n},o)=>{let l=a&&o.records!==void 0,{records:b}=o,c=[],S=new Map,d=e?{timeout:e}:void 0,T=new WeakMap,s=n(),{value:u}=s.next(),p=r(u.data,o,void 0,l?b.get(u.data.id):void 0);S.set(p.public.data.id,p),T.set(p,u);let i=p,N=!0,D=p,z=typeof requestIdleCallback<"u"&&t!==void 0&&!(t===null&&!o.order),v=z?O=>O.timeRemaining()>0:()=>!0,g=O=>{for(;i!==null;){if(!v(O)){requestIdleCallback(g,d);return}if(i.visited)i.visited=!1,i=i.sibling!==null?i.sibling:i.parent,D=i;else {let{value:m}=s.next(T.get(i));if(m===void 0){N?N=!1:(i.isShown&&c.push(i.public.data.id),i.visited=i.child!==null,i=i.child!==null?i.child:i.sibling!==null?i.sibling:i.parent),D=i;continue}let P=r(m.data,o,N?void 0:i,l?b.get(m.data.id):void 0);S.set(P.public.data.id,P),T.set(P,m),!N&&D===i?D.child=P:D.sibling=P,D=P;}}z&&o.setState({order:c,records:S,updateRequest:{}});};return z?requestIdleCallback(g,d):g(),t!==void 0&&a&&o.order?o:{order:c,records:S}},F=32768,M=2,q=({order:r,records:e},{opennessState:t})=>{if(typeof t!="object")return null;for(let a in t){if(!e.has(a))continue;let n=t[a],o=e.get(a),{open:l,subtreeCallback:b=x}=typeof n=="boolean"?{open:n}:n,c=x,S=x;if(o.isShown){if(l){let T=r.indexOf(a),s=o;for(;s!==null;){if(s.sibling!==null){s=s.sibling;break}s=s.parent;}let u=s===null?r.length-1-T:r.indexOf(s.public.data.id)-1-T,p=[[T+1,u]];c=i=>{if(i.isShown=i.parent?i.parent.public.isOpen&&i.parent.isShown:!0,i.isShown){let N=p[p.length-1];N.push(i.public.data.id),N.length===F+M&&p.push([T+1+F*p.length,0]);}},S=()=>{for(let i=0;i<p.length;i++)r.splice(...p[i]);};}else if(o.public.isOpen){let T=r.indexOf(a),s=0;c=u=>{u.isShown&&(s+=1),u.isShown=u.parent?u.parent.public.isOpen&&u.parent.isShown:!0;},S=()=>{r.splice(T+1,s);};}}let d=o;for(;d!==null;)d.visited?(d.visited=!1,d=d===o?null:d.sibling!==null?d.sibling:d.parent):(d.public.isOpen=d===o?l:d.public.isOpen,b(d.public,o.public),d!==o&&c(d),d.visited=d.child!==null,d=d.child!==null?d.child:d===o?null:d.sibling!==null?d.sibling:d.parent);S();}return {order:r,records:e,updateRequest:{}}},y=r=>(e,t,a)=>a.refresh?A(r,e,t):q(t,a),f=class extends PureComponent{static getDerivedStateFromProps(e,t){let{listRef:a=null,treeWalker:n}=e,{computeTree:o,list:l,order:b,treeWalker:c}=t;return {attachRefs:L([l,a]),...n!==c||!b?o(e,t,{refresh:!0}):null,treeWalker:n}}constructor(e,t){super(e,t),this.getRecordData=this.getRecordData.bind(this),this.state={list:createRef(),recomputeTree:this.recomputeTree.bind(this),setState:this.setState.bind(this)};}getItemData(){let{children:e,itemData:t}=this.props;return {component:e,getRecordData:this.getRecordData,treeData:t}}getRecordData(e){let{order:t,records:a}=this.state;return a.get(t[e]).public}recomputeTree(e){return new Promise(t=>{this.setState(a=>a.computeTree(this.props,a,{opennessState:e}),t);})}scrollTo(e){var t;(t=this.state.list.current)==null||t.scrollTo(e);}scrollToItem(e,t){var a;(a=this.state.list.current)==null||a.scrollToItem(this.state.order.indexOf(e),t);}};f.defaultProps={rowComponent:k};var C=f;var E=y({createRecord:(r,{recomputeTree:e},t,a)=>h({data:r,isOpen:a?a.public.isOpen:r.isOpenByDefault,setOpen:n=>e({[r.id]:n})},t)}),V=class extends C{constructor(e,t){super(e,t),this.state={...this.state,computeTree:E};}render(){let{placeholder:e,rowComponent:t,...a}=this.props,{attachRefs:n,order:o}=this.state;return e&&o.length===0?e:jsx(FixedSizeList,{...a,itemCount:o.length,itemData:this.getItemData(),itemKey:R,ref:n,children:t})}};var G=y({createRecord:(r,{recomputeTree:e,resetAfterId:t},a,n)=>{let o=h({data:r,height:n?n.public.height:r.defaultHeight,isOpen:n?n.public.isOpen:r.isOpenByDefault,resize:(l,b)=>{o.public.height=l,t(o.public.data.id,b);},setOpen:l=>e({[r.id]:l})},a);return o}}),I=class extends C{constructor(e,t){super(e,t),this.getItemSize=this.getItemSize.bind(this),this.state={...this.state,computeTree:G,resetAfterId:this.resetAfterId.bind(this)};}resetAfterId(e,t=!1){var o;let{list:a,order:n}=this.state;(o=a.current)==null||o.resetAfterIndex(n.indexOf(e),t);}recomputeTree(e){return super.recomputeTree(e).then(()=>{var t;(t=this.state.list.current)==null||t.resetAfterIndex(0,!0);})}render(){let{placeholder:e,itemSize:t,rowComponent:a,...n}=this.props,{attachRefs:o,order:l}=this.state;return e&&l.length===0?e:jsx(VariableSizeList,{...n,itemCount:l.length,itemData:this.getItemData(),itemKey:R,itemSize:t??this.getItemSize,ref:o,children:a})}getItemSize(e){return this.getRecordData(e).height}};

export { V as FixedSizeTree, k as Row, I as VariableSizeTree };
//# sourceMappingURL=out.js.map
//# sourceMappingURL=data:application/json;base64,